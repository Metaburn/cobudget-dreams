datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]

}

model User {
  id              String             @id @default(cuid())
  username        String?            @unique
  email           String?            @unique
  name            String?
  verifiedEmail   Boolean            @default(false)
  emailVerified   DateTime?
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt
  image           String?
  orgMemberships  OrgMember[]
  collMemberships RoundMember[]
  emailSettings   EmailSettings?
}

model EmailSettings {
  id                             String  @id @default(cuid())
  commentMentions                Boolean @default(true)
  commentBecauseCocreator        Boolean @default(true)
  commentBecauseCommented        Boolean @default(true)
  allocatedToYou                 Boolean @default(true)
  refundedBecauseBucketCancelled Boolean @default(true)
  bucketPublishedInRound         Boolean @default(true)
  contributionToYourBucket       Boolean @default(true)
  user                           User    @relation(fields: [userId], references: [id])
  userId                         String  @unique
}

model OrgMember {
  id                String       @id @default(cuid())
  group      Group @relation(fields: [groupId], references: [id])
  groupId    String
  user              User         @relation(fields: [userId], references: [id])
  userId            String
  bio               String?
  isAdmin           Boolean      @default(false)
  discourseUsername String?
  discourseApiKey   String?
  createdAt         DateTime     @default(now())
  updatedAt         DateTime     @updatedAt

  @@unique([groupId, userId])
}

model RoundMember {
  id           String     @id @default(cuid())
  round   Round @relation(fields: [roundId], references: [id])
  roundId String
  user         User       @relation(fields: [userId], references: [id])
  userId       String

  isAdmin     Boolean @default(false)
  isModerator Boolean @default(false) //switch to ROLES: admin, moderator, member, unapproved, banned
  bio         String?
  hasJoined   Boolean @default(true)

  isApproved Boolean  @default(false) //switch to approvedAt
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  buckets       Bucket[]
  allocations   Allocation[]
  contributions Contribution[]
  comments      Comment[]
  flags         Flag[]
  allocatedBy   Allocation[]   @relation("allocatedBy")

  incomingAccount   Account? @relation(name: "incoming", fields: [incomingAccountId], references: [id])
  statusAccount     Account? @relation(name: "status", fields: [statusAccountId], references: [id])
  outgoingAccount   Account? @relation(name: "outgoing", fields: [outgoingAccountId], references: [id])
  incomingAccountId String?  @unique
  outgoingAccountId String?  @unique
  statusAccountId   String?  @unique

  transactionsCreated Transaction[]
  @@unique([userId, roundId])
}

model Group {
  id           String           @id @default(cuid())
  slug         String           @unique
  name         String
  info         String?
  logo         String?
  customDomain String?
  orgMembers   OrgMember[]
  rounds  Round[]
  discourse    DiscourseConfig?

  finishedTodos Boolean @default(false)
}

model Round {
  id               String       @id @default(cuid())
  slug             String
  group     Group @relation(fields: [groupId], references: [id])
  groupId   String
  singleRound Boolean      @default(false)
  title            String
  archived         Boolean      @default(false)
  deleted          Boolean      @default(false)

  info               String?
  about              String?
  color              String?
  registrationPolicy RegistrationPolicy
  currency           String
  visibility         Visibility         @default(PUBLIC)

  maxAmountToBucketPerUser Int?
  bucketCreationCloses     DateTime?
  grantingOpens            DateTime?
  grantingCloses           DateTime?
  allowStretchGoals        Boolean?
  requireBucketApproval    Boolean?
  bucketReviewIsOpen       Boolean?
  discourseCategoryId      Int?

  tags       Tag[]
  guidelines Guideline[]
  fields     Field[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roundMember RoundMember[]
  buckets          Bucket[]
  allocations      Allocation[]
  contributions    Contribution[]
  transactions     Transaction[]

  @@unique([groupId, slug])
}

model Tag {
  id           String     @id @default(cuid())
  value        String
  round   Round @relation(fields: [roundId], references: [id])
  roundId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  buckets Bucket[]
  @@unique([roundId, value])
}

model Guideline {
  id           String     @id @default(cuid())
  title        String
  description  String
  position     Float
  round   Round @relation(fields: [roundId], references: [id])
  roundId String
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  Flag         Flag[]
}

model Field {
  id           String       @id @default(cuid())
  name         String
  description  String
  type         FieldType
  limit        Int?
  isRequired   Boolean
  position     Float
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  round   Round   @relation(fields: [roundId], references: [id])
  roundId String
  fieldValue   FieldValue[]
}

model FieldValue {
  id       String  @id @default(cuid())
  field    Field?  @relation(fields: [fieldId], references: [id])
  fieldId  String?
  value    Json
  Bucket   Bucket  @relation(fields: [bucketId], references: [id])
  bucketId String

  @@unique([bucketId, fieldId])
}

enum FieldType {
  TEXT
  MULTILINE_TEXT
  BOOLEAN
  ENUM
  FILE
}

enum RegistrationPolicy {
  OPEN
  REQUEST_TO_JOIN
  INVITE_ONLY
}

enum Visibility {
  PUBLIC
  //PRIVATE
  HIDDEN
}

enum AllocationType {
  ADD
  SET
}

model Bucket {
  id               String             @id @default(cuid())
  round       Round         @relation(fields: [roundId], references: [id])
  roundId     String
  title            String
  description      String?
  summary          String?
  Images           Image[]
  cocreators       RoundMember[]
  BudgetItems      BudgetItem[]
  FieldValues      FieldValue[]
  comments         Comment[]
  approvedAt       DateTime?
  publishedAt      DateTime?
  fundedAt         DateTime?
  canceledAt       DateTime?
  completedAt      DateTime?
  deleted          Boolean            @default(false)
  discourseTopicId Int?
  flags            Flag[]
  tags             Tag[]
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  Contributions    Contribution[]
  account          Account?           @relation(fields: [statusAccountId], references: [id])
  statusAccountId  String?            @unique
}

model Image {
  id       String  @id @default(cuid())
  small    String?
  large    String?
  bucket   Bucket? @relation(fields: [bucketId], references: [id])
  bucketId String?
}

model BudgetItem {
  id          String         @id @default(cuid())
  description String
  min         Int
  max         Int?
  type        BudgetItemType
  Bucket      Bucket?        @relation(fields: [bucketId], references: [id])
  bucketId    String?
}

enum BudgetItemType {
  INCOME
  EXPENSE
}

model Comment {
  id           String           @id @default(cuid())
  content      String
  isLog        Boolean          @default(false)
  createdAt    DateTime         @default(now())
  updatedAt    DateTime         @updatedAt
  collMember   RoundMember @relation(fields: [collMemberId], references: [id])
  collMemberId String
  bucket       Bucket           @relation(fields: [bucketId], references: [id])
  bucketId     String
}

model Flag {
  id              String           @id @default(cuid())
  guideline       Guideline?       @relation(fields: [guidelineId], references: [id])
  guidelineId     String?
  comment         String?
  collMember      RoundMember @relation(fields: [collMemberId], references: [id])
  collMemberId    String
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  type            FlagType
  resolvingFlag   Flag?            @relation("FlagToFlag", fields: [resolvingFlagId], references: [id])
  resolvedBy      Flag?            @relation("FlagToFlag")
  resolvingFlagId String?          @unique
  bucket          Bucket           @relation(fields: [bucketId], references: [id])
  bucketId        String
}

enum FlagType {
  RAISE_FLAG
  RESOLVE_FLAG
  ALL_GOOD_FLAG
}

model Allocation {
  id                 String            @id @default(cuid())
  round         Round        @relation(fields: [roundId], references: [id])
  roundId       String
  roundMember   RoundMember  @relation(fields: [roundMemberId], references: [id])
  roundMemberId String
  allocatedBy        RoundMember? @relation("allocatedBy", fields: [allocatedById], references: [id])
  allocatedById      String?
  amount             Int
  amountBefore       Int?
  allocationType     AllocationType    @default(ADD)
  createdAt          DateTime          @default(now())
}

model Contribution {
  id                 String           @id @default(cuid())
  round         Round       @relation(fields: [roundId], references: [id])
  roundId       String
  roundMember   RoundMember @relation(fields: [roundMemberId], references: [id])
  roundMemberId String
  bucket             Bucket           @relation(fields: [bucketId], references: [id])
  bucketId           String
  amount             Int
  amountBefore       Int?
  createdAt          DateTime         @default(now())
}

model DiscourseConfig {
  id               String       @id @default(cuid())
  url              String
  apiKey           String
  dreamsCategoryId Int
  minPostLength    Int
  group     Group @relation(fields: [groupId], references: [id])
  groupId   String       @unique
}

model Account {
  id String @id @default(cuid())

  incomingRoundMember RoundMember? @relation(name: "incoming")
  outgoingRoundMember RoundMember? @relation(name: "outgoing")
  statusRoundMember   RoundMember? @relation(name: "status")
  bucket                   Bucket?

  outgoingTransactions Transaction[] @relation(name: "from")
  incomingTransactions Transaction[] @relation(name: "to")

  createdAt DateTime @default(now())
}

model Transaction {
  id String @id @default(cuid())

  type      TransactionType
  amount    Int
  createdAt DateTime        @default(now())

  roundMember   RoundMember? @relation(fields: [roundMemberId], references: [id])
  roundMemberId String?
  round         Round?       @relation(fields: [roundId], references: [id])
  roundId       String?

  fromAccount   Account @relation(name: "from", fields: [fromAccountId], references: [id])
  toAccount     Account @relation(name: "to", fields: [toAccountId], references: [id])
  fromAccountId String
  toAccountId   String
}

enum TransactionType {
  ALLOCATION
  CONTRIBUTION
}
